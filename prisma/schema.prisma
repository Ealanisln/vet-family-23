generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Appointment {
  id       String   @id
  userId   String
  petId    String
  dateTime DateTime
  reason   String
  status   String
  Pet      Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Billing {
  id            String   @id
  userId        String
  petId         String?
  date          DateTime
  services      String[]
  cost          Float
  paymentStatus String
  Pet           Pet?     @relation(fields: [petId], references: [id])
  User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Deworming {
  id                 String          @id
  petId              String
  dewormingType      DewormingType
  stage              DewormingStage
  status             DewormingStatus @default(PENDING)
  administrationDate DateTime
  nextDoseDate       DateTime
  batchNumber        String?
  manufacturer       String?
  veterinarianName   String?
  notes              String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime
  Pet                Pet             @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@index([nextDoseDate, status])
  @@index([petId, dewormingType])
}

model DewormingSchedule {
  id            String          @id
  petId         String
  dewormingType DewormingType
  stage         DewormingStage
  scheduledDate DateTime
  status        DewormingStatus @default(PENDING)
  reminderSent  Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  Pet           Pet             @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@index([petId, scheduledDate, status])
}

model InventoryItem {
  id                  String                @id
  name                String
  category            InventoryCategory
  description         String?
  activeCompound      String?
  presentation        String?
  measure             String?
  brand               String?
  quantity            Int                   @default(0)
  minStock            Int?
  location            String?
  expirationDate      DateTime?
  status              InventoryStatus       @default(ACTIVE)
  batchNumber         String?
  specialNotes        String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  cost                Float?
  price               Float?
  InventoryMovement   InventoryMovement[]
  MedicalOrderProduct MedicalOrderProduct[]

  @@index([category])
  @@index([expirationDate])
  @@index([expirationDate], map: "InventoryItem_expiration_idx")
  @@index([name])
  @@index([status])
}

model InventoryMovement {
  id              String        @id
  itemId          String
  type            MovementType
  quantity        Int
  date            DateTime      @default(now())
  reason          String?
  userId          String?
  relatedRecordId String?
  notes           String?
  InventoryItem   InventoryItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  User            User?         @relation(fields: [userId], references: [id])

  @@index([itemId, date])
  @@index([itemId, date], map: "InventoryMovement_item_date_idx")
  @@index([userId])
  @@index([userId], map: "InventoryMovement_user_idx")
}

model MedicalHistory {
  id             String   @id
  petId          String
  visitDate      DateTime
  reasonForVisit String
  diagnosis      String
  treatment      String
  prescriptions  String[]
  notes          String?
  Pet            Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
}

model MedicalOrder {
  id                  String                @id
  petId               String
  userId              String
  visitDate           DateTime
  diagnosis           String?
  treatment           String?
  prescriptions       String[]
  notes               String?
  status              MedicalOrderStatus    @default(PENDING)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  Pet                 Pet                   @relation(fields: [petId], references: [id])
  User                User                  @relation(fields: [userId], references: [id])
  MedicalOrderProduct MedicalOrderProduct[]

  @@index([petId])
  @@index([status])
  @@index([userId])
}

model MedicalOrderProduct {
  id            String        @id
  orderId       String
  productId     String
  quantity      Int
  unitPrice     Float
  notes         String?
  MedicalOrder  MedicalOrder  @relation(fields: [orderId], references: [id])
  InventoryItem InventoryItem @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Pet {
  id                  String                @id
  internalId          String?               @unique
  userId              String
  name                String
  species             String
  breed               String
  dateOfBirth         DateTime
  gender              String
  weight              Float
  microchipNumber     String?
  isNeutered          Boolean               @default(false)
  isDeceased          Boolean               @default(false)
  isArchived          Boolean               @default(false)
  Appointment         Appointment[]
  Billing             Billing[]
  Deworming           Deworming[]
  DewormingSchedule   DewormingSchedule[]
  MedicalHistory      MedicalHistory[]
  MedicalOrder        MedicalOrder[]
  User                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  Reminder            Reminder[]
  Vaccination         Vaccination[]
  VaccinationSchedule VaccinationSchedule[]

  @@index([userId])
  @@index([isArchived])
  @@index([userId, isArchived])
}

model Reminder {
  id           String   @id
  userId       String
  petId        String
  reminderType String
  dueDate      DateTime
  status       String
  Pet          Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id       String     @id
  key      String     @unique
  name     String
  UserRole UserRole[]
}

model Staff {
  id                 String @id
  name               String
  position           String
  contactInformation String
}

model User {
  id                     String              @id
  kindeId                String              @unique
  email                  String?
  firstName              String?
  lastName               String?
  name                   String?
  phone                  String?
  address                String?
  preferredContactMethod String?
  pet                    String?
  visits                 Int                 @default(0)
  nextVisitFree          Boolean             @default(false)
  lastVisit              DateTime?
  createdAt              DateTime            @default(now())
  updatedAt              DateTime
  Appointment            Appointment[]
  Billing                Billing[]
  InventoryMovement      InventoryMovement[]
  MedicalOrder           MedicalOrder[]
  Pet                    Pet[]
  Reminder               Reminder[]
  UserRole               UserRole[]
  VisitHistory           VisitHistory[]

  @@index([email])
  @@index([firstName, lastName, phone])
  @@index([firstName, lastName, phone], map: "User_name_phone_idx")
}

model UserRole {
  id     String @id
  userId String
  roleId String
  Role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model Vaccination {
  id                 String   @id
  petId              String
  vaccineType        String
  stage              String
  status             String
  administrationDate DateTime
  nextDoseDate       DateTime
  batchNumber        String?
  manufacturer       String?
  veterinarianName   String?
  notes              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime
  Pet                Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@index([nextDoseDate, status])
  @@index([nextDoseDate, status], map: "Vaccination_next_dose_idx")
  @@index([petId, vaccineType])
  @@index([petId, vaccineType], map: "Vaccination_pet_type_idx")
}

model VaccinationSchedule {
  id            String            @id
  petId         String
  vaccineType   VaccineType
  stage         VaccinationStage
  scheduledDate DateTime
  status        VaccinationStatus @default(PENDING)
  reminderSent  Boolean           @default(false)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime
  Pet           Pet               @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@index([petId, scheduledDate, status])
  @@index([petId, scheduledDate, status], map: "VaccinationSchedule_pet_date_idx")
}

model VisitHistory {
  id     String   @id
  userId String
  date   DateTime @default(now())
  cost   Float
  isFree Boolean  @default(false)
  User   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum DewormingStage {
  PUPPY
  ADULT
}

enum DewormingStatus {
  PENDING
  COMPLETED
  OVERDUE
  SCHEDULED
}

enum DewormingType {
  INTERNAL
  EXTERNAL
  BOTH
}

enum InventoryCategory {
  MEDICINE
  SURGICAL_MATERIAL
  VACCINE
  FOOD
  ACCESSORY
  CONSUMABLE
  ANTI_INFLAMMATORY_ANALGESICS
  ANTIBIOTIC
  ANTIFUNGAL
  DEWORMERS
  GASTROPROTECTORS_GASTROENTEROLOGY
  CARDIOLOGY
  DERMATOLOGY
  ENDOCRINOLOGY_HORMONAL
  ANESTHETICS_SEDATIVES
  OTIC
  OINTMENTS
  RESPIRATORY
  OPHTHALMIC
  DRY_FOOD
  WET_FOOD
  CHIPS
  ANTI_EMETIC
  ANTISEPTICS_HEALING
  NEPHROLOGY
  ANTAGONISTS
  IMMUNOSTIMULANT
  APPETITE_STIMULANTS_HEMATOPOIESIS
  SUPPLEMENTS_OTHERS
  LAXATIVES
  ANTIDIARRHEAL
  ANTIHISTAMINE
  MEDICATED_SHAMPOO
  CORTICOSTEROIDS
  EXPECTORANT
  BRONCHODILATOR
}

enum InventoryStatus {
  ACTIVE
  INACTIVE
  LOW_STOCK
  OUT_OF_STOCK
  EXPIRED
}

enum MedicalOrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum MovementType {
  IN
  OUT
  ADJUSTMENT
  RETURN
  EXPIRED
}

enum VaccinationStage {
  PUPPY
  ADULT
}

enum VaccinationStatus {
  PENDING
  COMPLETED
  OVERDUE
  SCHEDULED
}

enum VaccineType {
  DP_PUPPY
  DHPPI
  DHPPI_L
  DHPPI_RL
  BORDETELLA
  SEXTUPLE
  SEXTUPLE_R
  RABIES
  TRIPLE_FELINA
  LEUCEMIA_FELINA
  RABIA_FELINA
}
