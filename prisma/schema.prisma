// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     String         @id @default(auto()) @map("_id") @db.ObjectId
  kindeId                String         @unique
  email                  String?        @unique
  firstName              String?
  lastName               String?
  name                   String?
  phone                  String?
  address                String?
  preferredContactMethod String?
  pet                    String?
  visits                 Int            @default(0)
  nextVisitFree          Boolean        @default(false)
  lastVisit              DateTime?
  visitHistory           VisitHistory[]
  pets                   Pet[]
  appointments           Appointment[]
  billings               Billing[]
  reminders              Reminder[]
  roles                  String[] // Nuevo campo para roles
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt

  @@map("users")
}

model VisitHistory {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  userId String   @db.ObjectId
  user   User     @relation(fields: [userId], references: [id])
  date   DateTime @default(now())
  cost   Float
  isFree Boolean  @default(false)
}

model Pet {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  internalId      String?
  userId          String           @db.ObjectId
  user            User             @relation(fields: [userId], references: [id])
  name            String
  species         String
  breed           String
  dateOfBirth     DateTime
  gender          String
  weight          Float
  microchipNumber String?
  isNeutered      Boolean          @default(false)
  isDeceased      Boolean          @default(false)
  medicalHistory  MedicalHistory[]
  vaccinations    Vaccination[]
  appointments    Appointment[]
  billings        Billing[]
  reminders       Reminder[]
}

model MedicalHistory {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  petId          String   @db.ObjectId
  pet            Pet      @relation(fields: [petId], references: [id])
  visitDate      DateTime
  reasonForVisit String
  diagnosis      String
  treatment      String
  prescriptions  String[]
  notes          String?
}

model Vaccination {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  petId              String   @db.ObjectId
  pet                Pet      @relation(fields: [petId], references: [id])
  vaccineType        String
  administrationDate DateTime
  nextDoseDate       DateTime
}

model Appointment {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId   String   @db.ObjectId
  user     User     @relation(fields: [userId], references: [id])
  petId    String   @db.ObjectId
  pet      Pet      @relation(fields: [petId], references: [id])
  dateTime DateTime
  reason   String
  status   String
}

model Billing {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  petId         String?  @db.ObjectId
  pet           Pet?     @relation(fields: [petId], references: [id])
  date          DateTime
  services      String[]
  cost          Float
  paymentStatus String
}

model Reminder {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  petId        String   @db.ObjectId
  pet          Pet      @relation(fields: [petId], references: [id])
  reminderType String
  dueDate      DateTime
  status       String
}

model Staff {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  position           String
  contactInformation String
}
