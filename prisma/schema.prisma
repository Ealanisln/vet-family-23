generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String              @id
  kindeId                String              @unique
  email                  String?
  firstName              String?
  lastName               String?
  name                   String?
  phone                  String?
  address                String?
  preferredContactMethod String?
  pet                    String?
  visits                 Int                 @default(0)
  nextVisitFree          Boolean             @default(false)
  lastVisit              DateTime?
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  appointments           Appointment[]
  billings               Billing[]
  inventoryMovements     InventoryMovement[]
  pets                   Pet[]
  reminders              Reminder[]
  userRoles              UserRole[]
  visitHistory           VisitHistory[]
  sales                  Sale[]
  openedDrawers          CashDrawer[]        @relation("OpenedDrawers")
  closedDrawers          CashDrawer[]        @relation("ClosedDrawers")

  @@index([firstName, lastName, phone])
  @@index([email])
}

model Role {
  id        String     @id @default(uuid())
  key       String     @unique
  name      String
  userRoles UserRole[]
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  roleId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model VisitHistory {
  id     String   @id @default(uuid())
  userId String
  date   DateTime @default(now())
  cost   Float
  isFree Boolean  @default(false)
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Pet {
  id                  String                @id
  internalId          String?
  userId              String
  name                String
  species             String
  breed               String
  dateOfBirth         DateTime
  gender              String
  weight              Float
  microchipNumber     String?
  isNeutered          Boolean               @default(false)
  isDeceased          Boolean               @default(false)
  appointments        Appointment[]
  billings            Billing[]
  medicalHistory      MedicalHistory[]
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  reminders           Reminder[]
  vaccinations        Vaccination[]
  VaccinationSchedule VaccinationSchedule[]
  deworming           Deworming[]
  DewormingSchedule   DewormingSchedule[]
  sales               Sale[]

  @@index([userId])
}

model MedicalHistory {
  id             String   @id @default(uuid())
  petId          String
  visitDate      DateTime
  reasonForVisit String
  diagnosis      String
  treatment      String
  prescriptions  String[]
  notes          String?
  pet            Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
}

model Vaccination {
  id                 String   @id @default(uuid())
  petId              String
  vaccineType        String
  stage              String
  status             String
  administrationDate DateTime
  nextDoseDate       DateTime
  batchNumber        String?
  manufacturer       String?
  veterinarianName   String?
  notes              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  pet                Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@index([petId, vaccineType])
  @@index([nextDoseDate, status])
}

model VaccinationSchedule {
  id            String            @id @default(uuid())
  petId         String
  vaccineType   VaccineType
  stage         VaccinationStage
  scheduledDate DateTime
  status        VaccinationStatus @default(PENDING)
  reminderSent  Boolean           @default(false)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  pet           Pet               @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@index([petId, scheduledDate, status])
}

model Appointment {
  id       String   @id @default(uuid())
  userId   String
  petId    String
  dateTime DateTime
  reason   String
  status   String
  pet      Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Billing {
  id            String   @id @default(uuid())
  userId        String
  petId         String?
  date          DateTime
  services      String[]
  cost          Float
  paymentStatus String
  pet           Pet?     @relation(fields: [petId], references: [id])
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reminder {
  id           String   @id @default(uuid())
  userId       String
  petId        String
  reminderType String
  dueDate      DateTime
  status       String
  pet          Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Staff {
  id                 String @id @default(uuid())
  name               String
  position           String
  contactInformation String
}

model InventoryItem {
  id             String            @id @default(uuid())
  name           String
  category       InventoryCategory
  description    String?
  activeCompound String?
  presentation   String?
  measure        String?
  brand          String?
  quantity       Int               @default(0)
  minStock       Int?
  price          Float? // Campo para almacenar el precio
  cost           Float? // Campo para almacenar el costo
  location       String?
  expirationDate DateTime?
  status         InventoryStatus     @default(ACTIVE)
  batchNumber    String?
  specialNotes   String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  movements      InventoryMovement[]
  saleItems      SaleItem[]

  @@index([category])
  @@index([name])
  @@index([status])
  @@index([expirationDate])
}

model InventoryMovement {
  id              String        @id @default(uuid())
  itemId          String
  type            MovementType
  quantity        Int
  date            DateTime      @default(now())
  reason          String?
  userId          String?
  relatedRecordId String?
  notes           String?
  item            InventoryItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user            User?         @relation(fields: [userId], references: [id])

  @@index([itemId, date])
  @@index([userId])
}

// Modelos para POS
model Sale {
  id            String        @id @default(uuid())
  receiptNumber String        @unique
  date          DateTime      @default(now())
  userId        String?
  petId         String?
  subtotal      Float
  tax           Float
  discount      Float         @default(0)
  total         Float
  paymentMethod PaymentMethod
  status        SaleStatus    @default(COMPLETED)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relaciones
  items        SaleItem[]
  user         User?             @relation(fields: [userId], references: [id])
  pet          Pet?              @relation(fields: [petId], references: [id])
  transactions CashTransaction[]

  @@index([date])
  @@index([userId])
  @@index([paymentMethod])
  @@index([status])
}

model SaleItem {
  id          String  @id @default(uuid())
  saleId      String
  itemId      String?
  serviceId   String?
  description String
  quantity    Int
  unitPrice   Float
  discount    Float   @default(0)
  total       Float

  // Relaciones
  sale          Sale           @relation(fields: [saleId], references: [id], onDelete: Cascade)
  inventoryItem InventoryItem? @relation(fields: [itemId], references: [id])
  service       Service?       @relation(fields: [serviceId], references: [id])

  @@index([saleId])
  @@index([itemId])
  @@index([serviceId])
}

model Service {
  id          String          @id @default(uuid())
  name        String
  description String?
  category    ServiceCategory
  price       Float
  duration    Int? // Duraci√≥n en minutos
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relaciones
  saleItems SaleItem[]

  @@index([category])
  @@index([isActive])
}

model CashDrawer {
  id             String       @id @default(uuid())
  openedAt       DateTime     @default(now())
  closedAt       DateTime?
  openedBy       String
  closedBy       String?
  initialAmount  Float
  finalAmount    Float?
  expectedAmount Float?
  difference     Float?
  status         DrawerStatus @default(OPEN)
  notes          String?

  // Relaciones
  openUser     User              @relation("OpenedDrawers", fields: [openedBy], references: [id])
  closeUser    User?             @relation("ClosedDrawers", fields: [closedBy], references: [id])
  transactions CashTransaction[]

  @@index([openedAt])
  @@index([status])
}

model CashTransaction {
  id          String          @id @default(uuid())
  drawerId    String
  amount      Float
  type        TransactionType
  description String?
  createdAt   DateTime        @default(now())
  saleId      String?

  // Relaciones
  drawer CashDrawer @relation(fields: [drawerId], references: [id], onDelete: Cascade)
  sale   Sale?      @relation(fields: [saleId], references: [id])

  @@index([drawerId])
  @@index([type])
  @@index([saleId])
}

// Enumeraciones
enum VaccineType {
  DP_PUPPY
  DHPPI
  DHPPI_L
  DHPPI_RL
  BORDETELLA
  SEXTUPLE
  SEXTUPLE_R
  RABIES
  TRIPLE_FELINA
  LEUCEMIA_FELINA
  RABIA_FELINA
}

enum VaccinationStatus {
  PENDING
  COMPLETED
  OVERDUE
  SCHEDULED
}

enum VaccinationStage {
  PUPPY
  ADULT
}

enum InventoryCategory {
  ACCESSORY
  ANESTHETICS_SEDATIVES
  ANTAGONISTS
  ANTI_EMETIC
  ANTI_INFLAMMATORY_ANALGESICS
  ANTIBIOTIC
  ANTIDIARRHEAL
  ANTIFUNGAL
  ANTIHISTAMINE
  ANTISEPTICS_HEALING
  APPETITE_STIMULANTS_HEMATOPOIESIS
  BRONCHODILATOR
  CARDIOLOGY
  CHIPS
  CONSUMABLE
  CORTICOSTEROIDS
  DERMATOLOGY
  DEWORMERS
  DRY_FOOD
  ENDOCRINOLOGY_HORMONAL
  EXPECTORANT
  FOOD
  GASTROPROTECTORS_GASTROENTEROLOGY
  IMMUNOSTIMULANT
  LAXATIVES
  MEDICATED_SHAMPOO
  MEDICINE
  NEPHROLOGY
  OINTMENTS
  OPHTHALMIC
  OTIC
  RESPIRATORY
  SUPPLEMENTS_OTHERS
  SURGICAL_MATERIAL
  VACCINE
  WET_FOOD
}

enum InventoryStatus {
  ACTIVE
  INACTIVE
  LOW_STOCK
  OUT_OF_STOCK
  EXPIRED
}

enum MovementType {
  IN
  OUT
  ADJUSTMENT
  RETURN
  EXPIRED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  TRANSFER
  MOBILE_PAYMENT
  MULTIPLE
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum ServiceCategory {
  CONSULTATION
  SURGERY
  VACCINATION
  GROOMING
  DENTAL
  LABORATORY
  IMAGING
  HOSPITALIZATION
  OTHER
}

enum DrawerStatus {
  OPEN
  CLOSED
  RECONCILED
}

enum TransactionType {
  SALE
  REFUND
  DEPOSIT
  WITHDRAWAL
  ADJUSTMENT
}

// Nuevos modelos para desparasitaciones
model Deworming {
  id                 String   @id @default(uuid())
  petId             String
  dewormingType     DewormingType
  stage             DewormingStage
  status            DewormingStatus @default(PENDING)
  administrationDate DateTime
  nextDoseDate      DateTime
  batchNumber       String?
  manufacturer      String?
  veterinarianName  String?
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  pet               Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@index([petId, dewormingType])
  @@index([nextDoseDate, status])
}

model DewormingSchedule {
  id            String          @id @default(uuid())
  petId         String
  dewormingType DewormingType
  stage         DewormingStage
  scheduledDate DateTime
  status        DewormingStatus @default(PENDING)
  reminderSent  Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  pet           Pet             @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@index([petId, scheduledDate, status])
}

// Nuevos enums para desparasitaciones
enum DewormingType {
  INTERNAL
  EXTERNAL
  BOTH
}

enum DewormingStage {
  PUPPY
  ADULT
}

enum DewormingStatus {
  PENDING
  COMPLETED
  OVERDUE
  SCHEDULED
}
